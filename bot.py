import os
import random
import json
import io
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload, MediaIoBaseDownload
import gspread

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google
SCOPES = ['https://www.googleapis.com/auth/drive', 'https://www.googleapis.com/auth/spreadsheets']
service_account_info = json.loads(os.environ.get("GOOGLE_CREDENTIALS"))
credentials = service_account.Credentials.from_service_account_info(service_account_info, scopes=SCOPES)
drive_service = build('drive', 'v3', credentials=credentials)
sheets_client = gspread.authorize(credentials)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TEXTS_FOLDER_ID = os.environ.get("READ_FOLDER_ID")
IMAGES_FOLDER_ID = os.environ.get("WRITE_FOLDER_ID")
BOT_TOKEN = os.environ.get("BOT_TOKEN")
SHEET_ID = os.environ.get("SHEET_ID")

WAITING_PHOTO, WAITING_CONSENT = range(2)
user_codes = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f""" üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {update.effective_user.first_name}!
–Ø —Ä–∞–¥–∞, —á—Ç–æ –≤—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∑–∞—Ç–µ–µ –ø–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—é –í–∏–∫–∏–ø–µ–¥–∏–∏ :)

–í–æ—Ç —á—Ç–æ —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ /gettext . –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç. 

‚úçÔ∏è –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ –µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç. –ü–∏—Å–∞—Ç—å –º–æ–∂–Ω–æ –Ω–∞ –ª—é–±–æ–π –±—É–º–∞–≥–µ, –µ—Å–ª–∏ –±—É–¥—É—Ç –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è ‚Äî –Ω–µ—Å—Ç—Ä–∞—à–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –º–µ–Ω—è–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–∏—Å—å–º–∞, —Ç–æ –µ—Å—Ç—å –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ —Å —Ä—É—á–∫–∏ –Ω–∞ –∫–∞—Ä–∞–Ω–¥–∞—à –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. 
–°–ª–æ–≤–∞ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ –ª—É—á—à–µ –∑–∞–º–µ–Ω—è—Ç—å –Ω–∞ –º–Ω–æ–≥–æ—Ç–æ—á–∏—è.

üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏, —á—ë—Ç–∫–æ –∏ —Å–≤–µ—Ä—Ö—É. –ù—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–µ—Å—å –ª–∏—Å—Ç –ø–æ–ø–∞–¥–∞–ª –≤ –∫–∞–¥—Ä. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏–∑–±–µ–∂–∞—Ç—å —Ç–µ–Ω–∏ –æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –ª–∏—Å—Ç–µ.

üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (JPG –∏–ª–∏ PNG), –∫–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ –¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ –≤ Telegram.

‚úÖ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏.

–°–ø–∞—Å–∏–±–æ!

–ü—Ä–∏—Å—Ç—É–ø–∏–º? –ù–∞–∂–∏–º–∞–π—Ç–µ /gettext 
"""
    )

async def get_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    results = drive_service.files().list(
        q=f"'{TEXTS_FOLDER_ID}' in parents and mimeType='text/plain'",
        fields="files(id, name)"
    ).execute()
    files = results.get('files', [])
    if not files:
        await update.message.reply_text("–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤.")
        return ConversationHandler.END

    file = random.choice(files)
    file_id = file['id']
    file_name = file['name']

    request = drive_service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while not done:
        status, done = downloader.next_chunk()
    fh.seek(0)
    text = fh.read().decode('utf-8')

    code = file_name.replace('.txt', '')
    user_codes[update.effective_user.id] = code

    await update.message.reply_text(f"{text}\n\n–í–∞—à –∫–æ–¥: {code}")
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –æ—Ç —Ä—É–∫–∏ —Ç–µ–∫—Å—Ç–∞ (JPG –∏–ª–∏ PNG).")
    return WAITING_PHOTO

async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_codes:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é /gettext.")
        return ConversationHandler.END

    code = user_codes[user_id]
    photo = update.message.photo[-1] if update.message.photo else None
    if not photo:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return WAITING_PHOTO

    file = await context.bot.get_file(photo.file_id)
    ext = '.jpg'

    existing_files = drive_service.files().list(
        q=f"'{IMAGES_FOLDER_ID}' in parents and name contains '{code}' and trashed = false",
        fields="files(name)"
    ).execute().get("files", [])

    suffix = len(existing_files) + 1
    filename = f"{code}_{suffix}{ext}"
    await file.download_to_drive(filename)

    file_metadata = {'name': filename, 'parents': [IMAGES_FOLDER_ID]}
    media = MediaFileUpload(filename, mimetype='image/jpeg')
    drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
    os.remove(filename)

    # –í–æ–ø—Ä–æ—Å –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∏–∫–∞
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="save_nick"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="no_nick")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        """–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –≤–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç!

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑—Ä–µ–¥–∫–∞ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–î–∞¬ª. –¢–æ–≥–¥–∞ –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–º –≤–∞—à –Ω–∏–∫.

–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–µ—Ç¬ª. –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Å–ø–∞—Å–∏–±–æ!""",
        reply_markup=reply_markup
    )
    return WAITING_CONSENT

async def handle_consent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("SHEET_ID:", SHEET_ID)
    print("Email from creds:", credentials.service_account_email)

    query = update.callback_query
    await query.answer()
    user = query.from_user

    if query.data == "save_nick":
        username = user.username or f"id:{user.id}"
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        sheet = sheets_client.open_by_key(SHEET_ID).worksheet("–õ–∏—Å—Ç1")
        sheet.append_row([username, timestamp])
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤–∞—à –Ω–∏–∫.")
    else:
        await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à –≤–∫–ª–∞–¥ —É–∂–µ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('gettext', get_text)],
        states={
            WAITING_PHOTO: [MessageHandler(filters.PHOTO, receive_photo)],
            WAITING_CONSENT: [CallbackQueryHandler(handle_consent)]
        },
        fallbacks=[CommandHandler('start', start)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
