import os
import random
import io
import json
from telegram import Update, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from dotenv import load_dotenv
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID")  # –ü—Ä–∏–º–µ—Ä: -1002722164466
TEXTS_FOLDER_ID = os.environ.get("READ_FOLDER_ID")
GOOGLE_CREDENTIALS = json.loads(os.environ.get("GOOGLE_CREDENTIALS"))

# Google Drive client
SCOPES = ['https://www.googleapis.com/auth/drive.readonly']
credentials = service_account.Credentials.from_service_account_info(
    GOOGLE_CREDENTIALS, scopes=SCOPES
)
drive_service = build('drive', 'v3', credentials=credentials)

WAITING_PHOTO = 1
user_codes = {}
user_photo_counts = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("‚ÄºÔ∏è DEBUG UPDATE (start):", update)
    await update.message.reply_text(
        f""" üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {update.effective_user.first_name}!
–Ø —Ä–∞–¥–∞, —á—Ç–æ –≤—ã —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∑–∞—Ç–µ–µ –ø–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—é –í–∏–∫–∏–ø–µ–¥–∏–∏ :)

–í–æ—Ç —á—Ç–æ —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ /gettext . –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç. 

‚úçÔ∏è –ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ –µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç. –ü–∏—Å–∞—Ç—å –º–æ–∂–Ω–æ –Ω–∞ –ª—é–±–æ–π –±—É–º–∞–≥–µ, –µ—Å–ª–∏ –±—É–¥—É—Ç –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è ‚Äî –Ω–µ—Å—Ç—Ä–∞—à–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –º–µ–Ω—è–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–∏—Å—å–º–∞, —Ç–æ –µ—Å—Ç—å –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ —Å —Ä—É—á–∫–∏ –Ω–∞ –∫–∞—Ä–∞–Ω–¥–∞—à –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. 
–°–ª–æ–≤–∞ –Ω–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ –ª—É—á—à–µ –∑–∞–º–µ–Ω—è—Ç—å –Ω–∞ –º–Ω–æ–≥–æ—Ç–æ—á–∏—è.

üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏, —á—ë—Ç–∫–æ –∏ —Å–≤–µ—Ä—Ö—É. –ù—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤–µ—Å—å –ª–∏—Å—Ç –ø–æ–ø–∞–¥–∞–ª –≤ –∫–∞–¥—Ä. –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏–∑–±–µ–∂–∞—Ç—å —Ç–µ–Ω–∏ –æ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –ª–∏—Å—Ç–µ.

üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (JPG –∏–ª–∏ PNG), –∫–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ –¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ –≤ Telegram.

‚úÖ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏.

–°–ø–∞—Å–∏–±–æ!

–ü—Ä–∏—Å—Ç—É–ø–∏–º? –ù–∞–∂–∏–º–∞–π—Ç–µ /gettext 

"""
    )

async def get_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("‚ÄºÔ∏è DEBUG UPDATE (gettext):", update)
    results = drive_service.files().list(
        q=f"'{TEXTS_FOLDER_ID}' in parents and mimeType='text/plain' and trashed = false",
        fields="files(id, name)"
    ).execute()
    files = results.get('files', [])
    if not files:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤.")
        return ConversationHandler.END

    file = random.choice(files)
    file_id = file['id']
    file_name = file['name']
    code = file_name.replace('.txt', '')

    request = drive_service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while not done:
        _, done = downloader.next_chunk()

    fh.seek(0)
    text = fh.read().decode('utf-8')

    user_id = update.effective_user.id
    user_codes[user_id] = code
    user_photo_counts[user_id] = 0

    await update.message.reply_text(f"{text}\n\n–í–∞—à –∫–æ–¥: {code}")
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –æ—Ç —Ä—É–∫–∏ —Ç–µ–∫—Å—Ç–∞ (JPG –∏–ª–∏ PNG).")
    return WAITING_PHOTO

async def receive_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("‚ÄºÔ∏è DEBUG UPDATE (photo):", update)
    user_id = update.effective_user.id
    if user_id not in user_codes:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é /gettext.")
        return ConversationHandler.END

    code = user_codes[user_id]
    user_photo_counts[user_id] += 1
    suffix = user_photo_counts[user_id]

    photo = update.message.photo[-1] if update.message.photo else None
    if not photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return WAITING_PHOTO

    file = await context.bot.get_file(photo.file_id)
    filename = f"{code}_{suffix}.jpg"
    await file.download_to_drive(filename)

    with open(filename, "rb") as img:
        await context.bot.send_photo(
            chat_id=ARCHIVE_CHAT_ID,
            photo=InputFile(img),
            caption=f"{code}_{suffix}"
        )

    os.remove(filename)
    await update.message.reply_text("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥ –≤ –ø—Ä–æ–µ–∫—Ç! –í—ã –ø—Ä–∏–±–ª–∏–∑–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ kraken-–º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–º–æ–∂–µ—Ç ¬´—á–∏—Ç–∞—Ç—å¬ª —Ä—É–∫–æ–ø–∏—Å–∏ –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('gettext', get_text)],
        states={WAITING_PHOTO: [MessageHandler(filters.PHOTO, receive_photo)]},
        fallbacks=[CommandHandler('start', start)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
